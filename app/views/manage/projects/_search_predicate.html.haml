- multiple_choice = local_assigns[:values].present?
- allow_multiple = local_assigns[:allow_multiple] ? 'true' : 'false'
- date_field = field.ends_with?('_at')
- field_name = field.to_s.sub(/(_at|_id)/, '').titleize
.search-predicate{ data: { controller: 'search-predicate', :'search-predicate-multiple-value' => allow_multiple } }
  .field
    %input{ type: :hidden, data: { 'search-predicate-target': 'field', action: 'search-predicate#refresh' }, value: field }
    %span= field_name
  .operator
    .select-arrow= fa_icon("chevron-down")
    %select{ data: { 'search-predicate-target': 'operator', action: 'search-predicate#refresh' }, autocomplete: :off }
      - if date_field
        %option{ selected: ('before' == operator ? 'selected' : nil), value: 'before' } before
        %option{ selected: ('after' == operator ? 'selected' : nil), value: 'after' } after
      - else
        %option{ selected: ('=' == operator ? 'selected' : nil), value: '=' } is
  .value
    - if multiple_choice
      .select-arrow= fa_icon("chevron-down")
      %select{ data: { 'search-predicate-target': 'value', action: 'search-predicate#refresh' }, autocomplete: :off }
        - if values.first.kind_of?(Array) # [ [title, value], ... ]
          - values.each do |pair|
            %option{ value: pair.last, selected: ((pair == value || pair.include?(value)) ? 'selected' : nil) }= pair.first
        - else # [ val, val, ... ]
          - values.each do |option|
            %option{ selected: (option == value ? 'selected' : nil) }= option
    - else
      %input{ type: :text, data: { 'search-predicate-target': 'value', action: 'search-predicate#refresh' }, value: value, autocomplete: :off, onfocus: 'this.select()', size: 10 }
  %input{ type: :hidden, data: { 'search-predicate-target': 'predicate' }, autocomplete: :off }
  .remove{ data: {action: 'click->search-predicate#remove' } }
    .btn-sm.btn-close