%h1
  Projects
  = link_to 'New Project', [:new, :manage, :project], class: 'btn btn-outline-secondary float-end'

.mb-4
  - if params[:v1]
    = render 'search'
  - else
    = render 'search_v2'

.row#search-results
  - if params[:view] == 'list'
    %table.table.project-table
      %thead
        %tr.small
          %th.sortable{ data: { sort: "name asc", reverse: "name desc" } } Project Name
          %th.sortable{ data: { sort: "status asc", reverse: "status desc" } } Status
          %th.sortable.text-nowrap{ data: { sort: "MAX(assignments.last_contacted_at) asc NULLS LAST", reverse: "MAX(assignments.last_contacted_at) desc NULLS LAST" } } Last Finisher Response
          %th.sortable{ data: { sort: "users.email asc", reverse: "users.email desc" } } Project Owner
          %th.sortable{ data: { sort: "finishers.chosen_name asc nulls last", reverse: "finishers.chosen_name desc nulls last" } } Finisher
      %tbody
        = render partial: 'project_row', collection: @projects, as: :project
    = will_paginate @projects
  - else
    = render @projects
    = will_paginate @projects

:javascript
  var handleSortClick = (element) => {
    const sortFormElem = document.getElementById('sort')
    const oldSortValue = sortFormElem.value
    const newSortValue = element.dataset.sort
    const newReverseValue = element.dataset.reverse
    if (!newSortValue) {
      return
    }

    console.log(oldSortValue, newSortValue, newReverseValue)
    if (newSortValue == oldSortValue) {
      sortFormElem.value = newReverseValue
    } else {
      sortFormElem.value = newSortValue
    }

    const tableElem = document.getElementsByClassName('project-table')[0]
    tableElem.classList.add('disabled')
    sortFormElem.form.requestSubmit()
  };

  var setupSortHeaders = () => {
    const sortElement = document.getElementById('sort')
    if (! sortElement) {
      return
    }
    const currentSort = sortElement.value
    const sortableHeaders = document.getElementsByClassName('sortable')

    for (var i=0; i < sortableHeaders.length; i++) {
      let header = sortableHeaders[i]
      if (!header.dataset.clickable) {
        header.addEventListener('click', (event) => { handleSortClick(event.target) })
        header.dataset.clickable  = true
        if (header.dataset.sort == currentSort) {
          header.classList.add('sort-up')
        } else if (header.dataset.reverse == currentSort) {
          header.classList.add('sort-down')
        }
      }
    }
  };

  var setupSearchHandler = () => {
    window.addEventListener('search-predicate:dirty', () => {
      const searchResults = document.getElementById('search-results')
      const searchButtons = document.getElementsByClassName('btn-search')
      if (! searchResults || ! searchButtons || ! searchButtons.length == 1) {
        return
      }

      searchButtons[0].classList.add('highlight')
      searchResults.style.opacity = 0.5
    })
  };

  var setupDomListeners = () => {
    setupSortHeaders()
    setupSearchHandler()
  };

  window.addEventListener('load', setupDomListeners);
  document.addEventListener('turbo:load', setupDomListeners);
